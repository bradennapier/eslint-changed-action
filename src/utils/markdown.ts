import { LintRuleSummary, ChecksAnnotations, ActionData } from '../types';
import dedent from 'dedent';

const CREDIT_TAG = `
  <sup>
    Report generated by <b><a href="https://github.com/bradennapier/eslint-plus-action">eslint-plus-action</a></b>
  </sup>
`;

const REPORT_FOOTER = ` 
  ---

  ${CREDIT_TAG}  
`;

/**
 * Gets the title string for a rule summary and links to the rule
 * documentation if available.
 */
function getRuleSummaryTitle(summary: LintRuleSummary): string {
  return `## [${summary.level}] ${
    summary.ruleUrl ? `[${summary.ruleId}](${summary.ruleUrl})` : summary.ruleId
  }`;
}

function getAnnotationFileLink(
  annotation: ChecksAnnotations,
  data: ActionData,
): string {
  return `[${annotation.path}](
    ${data.repoHtmlUrl}/blob/${data.sha}/${annotation.path}#L${annotation.start_line}-L${annotation.end_line}
  )`;
}

export function getAnnotationSuggestions({
  suggestions,
}: ChecksAnnotations): string {
  return suggestions && suggestions.length > 0
    ? suggestions
        .map((suggestion) => `\t\t* [SUGGESTION] ${suggestion.desc}`)
        .join('\n')
    : '';
}

function getAnnotationFileLine(annotation: ChecksAnnotations): string {
  return `Line ${annotation.start_line}${
    annotation.end_line !== annotation.start_line
      ? `-${annotation.end_line}`
      : ''
  }`;
}

function getLintAnnotation(
  annotation: ChecksAnnotations,
  data: ActionData,
): string {
  return dedent`- ${getAnnotationFileLink(
    annotation,
    data,
  )} ${getAnnotationFileLine(annotation)} - ${annotation.message}${
    data.issueSummaryType === 'full' ? getAnnotationSuggestions(annotation) : ''
  }`;
}

function getRuleSummary(summary: LintRuleSummary, data: ActionData): string {
  return dedent`
    ${getRuleSummaryTitle(summary)} 

    > ${summary.message}

    ${summary.annotations
      .map((annotation) => getLintAnnotation(annotation, data))
      .join('\n')}
  `;
}

export function getSortedRuleSummaries(data: ActionData): string {
  if ([...data.state.rulesSummaries].length === 0) {
    return '';
  }
  return dedent`
    ---
    
    ${[...data.state.rulesSummaries]
      .sort(([, a], [, b]) => a.level.localeCompare(b.level))
      .map(([, summary]) => getRuleSummary(summary, data))
      .join('\n\n---\n\n')}
  `;
}

export function getLintSummary(data: ActionData): string {
  return dedent`
    |     Type     |         Occurrences          |              Fixable              |
    | ------------ | ---------------------------- | --------------------------------- | 
    | **Errors**   | ${data.state.errorCount}     | ${data.state.fixableErrorCount}   |
    | **Warnings** | ${data.state.warningCount}   | ${data.state.fixableWarningCount} |
    | **Ignored**  | ${data.state.ignoredCount}   | N/A                               |
  `;
}

const emojis: { [key: string]: string } = {
  success: ':white_check_mark: ',
  failure: ':x: ',
  skipped: ':white_circle: ',
  timed_out: ':watch: ',
};

function getLintConclusions(data: ActionData, checkUrl: string): string {
  return dedent`
    - **Result:**       ${emojis[data.state.conclusion] || ''}${
    data.state.conclusion
  }
    - **Annotations:** [${data.state.annotationCount} total](${checkUrl})
  `;
}

export function getIgnoredFilesSummary(
  data: ActionData,
  force = false,
): string {
  if (
    !force &&
    (!data.reportIgnoredFiles || data.issueSummaryType !== 'full')
  ) {
    return '';
  }
  return dedent`
    ---

    ## Ignored Files:

    ${data.state.ignoredFiles.map((filePath) => `- ${filePath}`).join('\n')}
  `;
}

export function getResultMarkdownBody(data: ActionData): string {
  const checkUrl = `${data.prHtmlUrl}/checks?check_run_id=${data.state.checkId}`;

  return dedent`
    ## ESLint Summary [View Full Report](${checkUrl})
  
    > Annotations are provided inline on the [Files Changed](${
      data.prHtmlUrl
    }/files) tab. You can also see all annotations that were generated on the [annotations page](${checkUrl}).
  
    ${getLintSummary(data)}
    ${getLintConclusions(data, checkUrl)}
    ${getIgnoredFilesSummary(data)}
    ${getSortedRuleSummaries(data)}

    ${REPORT_FOOTER}
  `;
}
